{"version":3,"sources":["components/Average.jsx","App.js","reportWebVitals.js","index.js"],"names":["Average","useState","list","setList","number","setNumber","inputEl","useRef","onChange","useCallback","e","target","value","onInsert","nextList","concat","parseInt","current","focus","avg","useMemo","numbers","console","log","length","reduce","a","b","ref","onClick","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAsCeA,EA9BC,WACZ,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAUC,iBAAO,MAErBC,EAAWC,uBAAY,SAACC,GAC1BL,EAAUK,EAAEC,OAAOC,SACrB,IAEIC,EAAWJ,uBAAY,WACzB,IAAMK,EAAWZ,EAAKa,OAAOC,SAASZ,IACtCD,EAAQW,GACRT,EAAU,IACVC,EAAQW,QAAQC,UAClB,CAACd,EAAOF,IAEJiB,EAAMC,mBAAS,kBAvBDC,EAuBiBnB,EAtBrCoB,QAAQC,IAAI,kCACU,IAAlBF,EAAQG,OAAoB,EACpBH,EAAQI,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC5BN,EAAQG,OAJF,IAACH,IAuBuB,CAACnB,IAE5C,OACI,gCACI,uBAAO0B,IAAKtB,EAASM,MAAOR,EAAQI,SAAUA,IAC9C,wBAAQqB,QAAShB,EAAjB,0BACA,6BACKX,EAAK4B,KAAI,SAAClB,EAAQmB,GAAT,OAAkB,6BAAiBnB,GAARmB,QAEjD,gCACI,oDADJ,IACiBZ,SCvBFnB,QCCAgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2318e7d7.chunk.js","sourcesContent":["import { useCallback, useMemo, useRef, useState } from \"react\";\r\nconst getAverage = (numbers) =>{\r\nconsole.log(\"평균계산중\");\r\nif (numbers.length ===0) return 0;\r\nconst sum = numbers.reduce((a, b) => a + b);\r\nreturn sum / numbers.length;\r\n};\r\n\r\nconst Average = () => {\r\n    const [list, setList] = useState([]);\r\n    const [number, setNumber] = useState(\"\");\r\n    const inputEl = useRef(null);\r\n\r\nconst onChange = useCallback((e) => {\r\n    setNumber(e.target.value);\r\n},[]);\r\n\r\nconst onInsert = useCallback(() =>{\r\n    const nextList = list.concat(parseInt(number));\r\n    setList(nextList);\r\n    setNumber(\"\");\r\n    inputEl.current.focus();\r\n},[number,list]);\r\n\r\nconst avg = useMemo( ()=> getAverage(list),[list]);\r\n\r\nreturn (\r\n    <div>\r\n        <input ref={inputEl} value={number} onChange={onChange} />\r\n        <button onClick={onInsert}>등록</button>\r\n        <ul>\r\n            {list.map((value , index)=>(<li key={index}>{value}</li>))}\r\n        </ul>\r\n<div>\r\n    <b>평균값:</b> {avg}\r\n</div>\r\n    </div>\r\n)};\r\nexport default Average;","import Average from \"./components/Average\";\nfunction App() {\n  return (\n    <>\n    \n      <Average/>\n      \n    </>\n  );\n}\n\nexport default Average;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}